version: '3'

services:
  pgdata:
    restart: always
    image: "postgres:13-alpine"
    ports:
        - "5432"
    volumes:
      - ./db_data/:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # - DB_HOST=0.0.0.0
    networks:
      - backands_network


  djapi:
    restart: always
    build: .
    depends_on:
      - pgdata
    command: gunicorn config.wsgi --bind 0.0.0.0:80
    # command: python manage.py runserver 0.0.0.0:8080 

    networks:
      - backands_network

  nginx:
    image: nginx:1.13
    restart: always
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on: 
      - djapi
    networks:
      - backands_network
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  redis:
    image: redis:alpine
    depends_on: 
      - djapi
    networks:
      - backands_network
  
  celery:
    build: .
    command: celery -A config worker -l info
          # volumes:
          #   - ./project/:/usr/src/app/
    environment:
        # - DEBUG=1
      - SECRET_KEY=django-insecure-s%2p*3c2-qj89ew(a2%oy#5ntt8ee*u^2v9=n_vd-e!*1l#-8u
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
    depends_on:
      - redis
    networks:
      - backands_network
  
  celery-beat:
    build: .
    command: celery -A config beat -l info
          # volumes:
          #   - ./project/:/usr/src/app/
    environment:
        # - DEBUG=1
      - SECRET_KEY=django-insecure-s%2p*3c2-qj89ew(a2%oy#5ntt8ee*u^2v9=n_vd-e!*1l#-8u
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
    depends_on:
      - redis
    networks:
      - backands_network


  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    

volumes:
  pgdata:  

networks:
  backands_network:
    driver: bridge